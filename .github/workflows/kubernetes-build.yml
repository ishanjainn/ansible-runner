name: Kubernetes-Build

on:
  push:

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: 'actions/checkout@v2'
        with:
          ref: ${{ github.ref }}
      
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./docker
          push: false
          tags: ${{ env.IMAGE_NAME }}:testing
      
      - name: Install K3D
        run: wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
      
      - name: Create local K3D managed container registry
        run: k3d registry create ${GITHUB_REPOSITORY#*/}.localhost --port 12345
      
      - name: Create K3D cluster
        run: k3d cluster create --registry-use k3d-${GITHUB_REPOSITORY#*/}.localhost:12345
      
      - name: Sleep for 30s
        run: sleep 30s
      
      - name: Tag built Docker image to be used k3d-resgitry
        run: docker tag ${{ env.IMAGE_NAME }}:testing k3d-${GITHUB_REPOSITORY#*/}.localhost:12345/${GITHUB_REPOSITORY#*/}:testing
      
      - name: Push image to local K3D managed container registry
        run: docker push k3d-${GITHUB_REPOSITORY#*/}.localhost:12345/${GITHUB_REPOSITORY#*/}:testing
      
      - name: Deploy image in Kubernetes pod
        run: kubectl run ${GITHUB_REPOSITORY#*/} --image k3d-${GITHUB_REPOSITORY#*/}.localhost:12345/${GITHUB_REPOSITORY#*/}:testing
      
      - name: Assign playbook to ENV Var
        run: |
          echo "ANSIBLE_PLAYBOOK=$(cat .github/build-files/test.yml)" >> $GITHUB_ENV

      - name: Deploy ConfigMap and kubernetes pod
        run: | 
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ${GITHUB_REPOSITORY#*/}
            namespace: default
          data:
            ${GITHUB_REPOSITORY#*/}.yml: ${ANSIBLE_PLAYBOOK}
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: ${GITHUB_REPOSITORY#*/}
            namespace: default
          spec:
            containers:
              - name: ${GITHUB_REPOSITORY#*/}
                image: k3d-${GITHUB_REPOSITORY#*/}.localhost:12345/${GITHUB_REPOSITORY#*/}:testing
                args:
                  - ${GITHUB_REPOSITORY#*/}.yml
                volumeMounts:
                  - name: ${GITHUB_REPOSITORY#*/}
                    mountPath: /ansible
            volumes:
              - name: ${GITHUB_REPOSITORY#*/}
                configMap:
                  name: ${GITHUB_REPOSITORY#*/}
          EOF

#      - name: Sleep for 1m
#        run: sleep 1m
#      
#      - name: Get status phase of pod and store in ENV
#        run: echo "KUBERNETES_TEST=$(kubectl get po ansible-runner -o jsonpath="{.status.phase}")" >> $GITHUB_ENV
#
#      - name: A/B Check
#        if: ${{ env.KUBERNETES_TEST != 'Running' }}
#        uses: actions/github-script@v3
#        with:
#          script: |
#              core.setFailed('Pod is not in running state')
